def vector_gauss(a, b):
    a, b :: object
    r0 :: str
    r1 :: object
    r2 :: str
    r3 :: object
    r4 :: dict
    r5 :: str
    r6 :: object
    r7, r8 :: int
    r9 :: object
    r10 :: int
    r11, j, r12, r13 :: object
    r14 :: int32
    r15 :: bit
    r16 :: bool
    r17, r18 :: object
    r19 :: dict
    r20 :: str
    r21 :: object
    r22, r23, r24 :: int
    r25, i :: object
    r26 :: native_int
    r27 :: bit
    r28 :: native_int
    r29, r30, r31 :: bit
    r32 :: bool
    r33 :: bit
    r34 :: tuple[object, object]
    r35, r36 :: object
    r37 :: tuple[object, object]
    r38, r39, r40, frac, r41, r42 :: object
    r43 :: dict
    r44 :: str
    r45 :: object
    r46 :: int
    r47, r48, r49 :: object
    r50 :: tuple[object, object]
    r51, r52, r53, r54 :: object
    r55 :: dict
    r56 :: str
    r57 :: object
    r58 :: int
    r59, r60, r61 :: object
    r62 :: tuple[object, object]
    r63, r64, r65, r66, r67 :: object
    r68 :: int32
    r69 :: bit
    r70, r71, r72, r73 :: object
    r74 :: int32
    r75 :: bit
    r76 :: int
    r77 :: object
    r78 :: int
    r79 :: object
    r80 :: dict
    r81 :: str
    r82 :: object
    r83, r84 :: int
    r85, r86 :: object
    r87, r88 :: int
    r89, r90, r91 :: object
    r92 :: int32
    r93 :: bit
    r94 :: bool
    r95, r96 :: object
    r97 :: str
    r98, r99, r100 :: object
    r101 :: dict
    r102 :: str
    r103 :: object
    r104 :: int
    r105, r106, r107 :: object
    r108 :: tuple[object, object]
    r109, r110, r111, r112 :: object
    r113 :: dict
    r114 :: str
    r115 :: object
    r116 :: int
    r117, r118, r119, r120 :: object
    r121 :: object[2]
    r122 :: object_ptr
    r123, r124 :: object
    r125 :: tuple[object, object]
    r126, r127, r128 :: object
    r129 :: int32
    r130 :: bit
    r131 :: int
    r132, r133 :: object
L0:
    r0 = 'copy'
    r1 = CPyObject_CallMethodObjArgs(a, r0, 0)
    if is_error(r1) goto L66 (error at vector_gauss:19) else goto L1
L1:
    a = r1
    r2 = 'copy'
    r3 = CPyObject_CallMethodObjArgs(b, r2, 0)
    if is_error(r3) goto L67 (error at vector_gauss:20) else goto L2
L2:
    b = r3
    r4 = gaus.globals :: static
    r5 = 'n'
    r6 = CPyDict_GetItem(r4, r5)
    if is_error(r6) goto L68 (error at vector_gauss:21) else goto L3
L3:
    r7 = unbox(int, r6)
    dec_ref r6
    if is_error(r7) goto L68 (error at vector_gauss:21) else goto L4
L4:
    r8 = CPyTagged_Subtract(r7, 2)
    dec_ref r7 :: int
    r9 = box(int, r8)
    r10 = 0
    inc_ref r10 :: int
    r11 = box(int, r10)
    j = r11
L5:
    inc_ref r10 :: int
    r12 = box(int, r10)
    r13 = PyObject_RichCompare(r12, r9, 0)
    dec_ref r12
    if is_error(r13) goto L69 (error at vector_gauss:21) else goto L6
L6:
    r14 = PyObject_IsTrue(r13)
    dec_ref r13
    r15 = r14 >= 0 :: signed
    if not r15 goto L69 (error at vector_gauss:21) else goto L7 :: bool
L7:
    r16 = truncate r14: int32 to builtins.bool
    if r16 goto L8 else goto L70 :: bool
L8:
    r17 = box(short_int, 2)
    r18 = PyNumber_Add(j, r17)
    dec_ref r17
    if is_error(r18) goto L69 (error at vector_gauss:22) else goto L9
L9:
    r19 = gaus.globals :: static
    r20 = 'n'
    r21 = CPyDict_GetItem(r19, r20)
    if is_error(r21) goto L71 (error at vector_gauss:22) else goto L10
L10:
    r22 = unbox(int, r21)
    dec_ref r21
    if is_error(r22) goto L71 (error at vector_gauss:22) else goto L11
L11:
    r23 = unbox(int, r18)
    dec_ref r18
    if is_error(r23) goto L72 (error at vector_gauss:-1) else goto L12
L12:
    r24 = r23
    inc_ref r24 :: int
    r25 = box(int, r24)
    i = r25
L13:
    r26 = r24 & 1
    r27 = r26 == 0
    r28 = r22 & 1
    r29 = r28 == 0
    r30 = r27 & r29
    if r30 goto L14 else goto L15 :: bool
L14:
    r31 = r24 < r22 :: signed
    r32 = r31
    goto L16
L15:
    r33 = CPyTagged_IsLt_(r24, r22)
    r32 = r33
L16:
    if r32 goto L17 else goto L73 :: bool
L17:
    r34 = (i, j)
    r35 = box(tuple[object, object], r34)
    r36 = PyObject_GetItem(a, r35)
    dec_ref r35
    if is_error(r36) goto L74 (error at vector_gauss:23) else goto L18
L18:
    r37 = (j, j)
    r38 = box(tuple[object, object], r37)
    r39 = PyObject_GetItem(a, r38)
    dec_ref r38
    if is_error(r39) goto L75 (error at vector_gauss:23) else goto L19
L19:
    r40 = PyNumber_TrueDivide(r36, r39)
    dec_ref r36
    dec_ref r39
    if is_error(r40) goto L74 (error at vector_gauss:23) else goto L20
L20:
    frac = r40
    r41 = box(short_int, 2)
    r42 = PyNumber_Add(j, r41)
    dec_ref r41
    if is_error(r42) goto L76 (error at vector_gauss:24) else goto L21
L21:
    r43 = gaus.globals :: static
    r44 = 'n'
    r45 = CPyDict_GetItem(r43, r44)
    if is_error(r45) goto L77 (error at vector_gauss:24) else goto L22
L22:
    r46 = unbox(int, r45)
    dec_ref r45
    if is_error(r46) goto L77 (error at vector_gauss:24) else goto L23
L23:
    r47 = load_address _Py_NoneStruct
    r48 = box(int, r46)
    r49 = PySlice_New(r42, r48, r47)
    dec_ref r42
    dec_ref r48
    if is_error(r49) goto L76 (error at vector_gauss:-1) else goto L24
L24:
    r50 = (i, r49)
    dec_ref r49
    inc_ref r50
    r51 = box(tuple[object, object], r50)
    r52 = PyObject_GetItem(a, r51)
    dec_ref r51
    if is_error(r52) goto L78 (error at vector_gauss:24) else goto L25
L25:
    r53 = box(short_int, 2)
    r54 = PyNumber_Add(j, r53)
    dec_ref r53
    if is_error(r54) goto L79 (error at vector_gauss:24) else goto L26
L26:
    r55 = gaus.globals :: static
    r56 = 'n'
    r57 = CPyDict_GetItem(r55, r56)
    if is_error(r57) goto L80 (error at vector_gauss:24) else goto L27
L27:
    r58 = unbox(int, r57)
    dec_ref r57
    if is_error(r58) goto L80 (error at vector_gauss:24) else goto L28
L28:
    r59 = load_address _Py_NoneStruct
    r60 = box(int, r58)
    r61 = PySlice_New(r54, r60, r59)
    dec_ref r54
    dec_ref r60
    if is_error(r61) goto L79 (error at vector_gauss:-1) else goto L29
L29:
    r62 = (j, r61)
    dec_ref r61
    r63 = box(tuple[object, object], r62)
    r64 = PyObject_GetItem(a, r63)
    dec_ref r63
    if is_error(r64) goto L79 (error at vector_gauss:24) else goto L30
L30:
    r65 = PyNumber_Multiply(r64, frac)
    dec_ref r64
    if is_error(r65) goto L79 (error at vector_gauss:24) else goto L31
L31:
    r66 = PyNumber_InPlaceSubtract(r52, r65)
    dec_ref r52
    dec_ref r65
    if is_error(r66) goto L78 (error at vector_gauss:24) else goto L32
L32:
    r67 = box(tuple[object, object], r50)
    r68 = PyObject_SetItem(a, r67, r66)
    dec_ref r67
    dec_ref r66
    r69 = r68 >= 0 :: signed
    if not r69 goto L76 (error at vector_gauss:24) else goto L33 :: bool
L33:
    r70 = PyObject_GetItem(b, i)
    if is_error(r70) goto L76 (error at vector_gauss:25) else goto L34
L34:
    r71 = PyObject_GetItem(b, j)
    if is_error(r71) goto L81 (error at vector_gauss:25) else goto L35
L35:
    r72 = PyNumber_Multiply(frac, r71)
    dec_ref frac
    dec_ref r71
    if is_error(r72) goto L82 (error at vector_gauss:25) else goto L36
L36:
    r73 = PyNumber_Subtract(r70, r72)
    dec_ref r70
    dec_ref r72
    if is_error(r73) goto L74 (error at vector_gauss:25) else goto L37
L37:
    r74 = PyObject_SetItem(b, i, r73)
    dec_ref i
    dec_ref r73
    r75 = r74 >= 0 :: signed
    if not r75 goto L83 (error at vector_gauss:25) else goto L38 :: bool
L38:
    r76 = CPyTagged_Add(r24, 2)
    dec_ref r24 :: int
    inc_ref r76 :: int
    r24 = r76
    r77 = box(int, r76)
    i = r77
    goto L13
L39:
    r78 = CPyTagged_Add(r10, 2)
    dec_ref r10 :: int
    inc_ref r78 :: int
    r10 = r78
    r79 = box(int, r78)
    j = r79
    goto L5
L40:
    r80 = gaus.globals :: static
    r81 = 'n'
    r82 = CPyDict_GetItem(r80, r81)
    if is_error(r82) goto L68 (error at vector_gauss:27) else goto L41
L41:
    r83 = unbox(int, r82)
    dec_ref r82
    if is_error(r83) goto L68 (error at vector_gauss:27) else goto L42
L42:
    r84 = CPyTagged_Subtract(r83, 2)
    dec_ref r83 :: int
    r85 = box(int, r84)
    r86 = box(short_int, -2)
    r87 = unbox(int, r85)
    dec_ref r85
    if is_error(r87) goto L84 (error at vector_gauss:-1) else goto L43
L43:
    r88 = r87
    inc_ref r88 :: int
    r89 = box(int, r88)
    i = r89
L44:
    inc_ref r88 :: int
    r90 = box(int, r88)
    r91 = PyObject_RichCompare(r90, r86, 4)
    dec_ref r90
    if is_error(r91) goto L85 (error at vector_gauss:27) else goto L45
L45:
    r92 = PyObject_IsTrue(r91)
    dec_ref r91
    r93 = r92 >= 0 :: signed
    if not r93 goto L85 (error at vector_gauss:27) else goto L46 :: bool
L46:
    r94 = truncate r92: int32 to builtins.bool
    if r94 goto L47 else goto L86 :: bool
L47:
    r95 = PyObject_GetItem(b, i)
    if is_error(r95) goto L85 (error at vector_gauss:28) else goto L48
L48:
    r96 = numpy :: module
    r97 = 'dot'
    r98 = CPyObject_GetAttr(r96, r97)
    if is_error(r98) goto L87 (error at vector_gauss:28) else goto L49
L49:
    r99 = box(short_int, 2)
    r100 = PyNumber_Add(i, r99)
    dec_ref r99
    if is_error(r100) goto L88 (error at vector_gauss:28) else goto L50
L50:
    r101 = gaus.globals :: static
    r102 = 'n'
    r103 = CPyDict_GetItem(r101, r102)
    if is_error(r103) goto L89 (error at vector_gauss:28) else goto L51
L51:
    r104 = unbox(int, r103)
    dec_ref r103
    if is_error(r104) goto L89 (error at vector_gauss:28) else goto L52
L52:
    r105 = load_address _Py_NoneStruct
    r106 = box(int, r104)
    r107 = PySlice_New(r100, r106, r105)
    dec_ref r100
    dec_ref r106
    if is_error(r107) goto L88 (error at vector_gauss:-1) else goto L53
L53:
    r108 = (i, r107)
    dec_ref r107
    r109 = box(tuple[object, object], r108)
    r110 = PyObject_GetItem(a, r109)
    dec_ref r109
    if is_error(r110) goto L88 (error at vector_gauss:28) else goto L54
L54:
    r111 = box(short_int, 2)
    r112 = PyNumber_Add(i, r111)
    dec_ref r111
    if is_error(r112) goto L90 (error at vector_gauss:28) else goto L55
L55:
    r113 = gaus.globals :: static
    r114 = 'n'
    r115 = CPyDict_GetItem(r113, r114)
    if is_error(r115) goto L91 (error at vector_gauss:28) else goto L56
L56:
    r116 = unbox(int, r115)
    dec_ref r115
    if is_error(r116) goto L91 (error at vector_gauss:28) else goto L57
L57:
    r117 = load_address _Py_NoneStruct
    r118 = box(int, r116)
    r119 = PySlice_New(r112, r118, r117)
    dec_ref r112
    dec_ref r118
    if is_error(r119) goto L90 (error at vector_gauss:28) else goto L58
L58:
    r120 = PyObject_GetItem(b, r119)
    dec_ref r119
    if is_error(r120) goto L90 (error at vector_gauss:28) else goto L59
L59:
    r121 = [r110, r120]
    r122 = load_address r121
    r123 = _PyObject_Vectorcall(r98, r122, 2, 0)
    dec_ref r98
    if is_error(r123) goto L92 (error at vector_gauss:28) else goto L60
L60:
    dec_ref r110
    dec_ref r120
    r124 = PyNumber_Subtract(r95, r123)
    dec_ref r95
    dec_ref r123
    if is_error(r124) goto L85 (error at vector_gauss:28) else goto L61
L61:
    r125 = (i, i)
    r126 = box(tuple[object, object], r125)
    r127 = PyObject_GetItem(a, r126)
    dec_ref r126
    if is_error(r127) goto L93 (error at vector_gauss:28) else goto L62
L62:
    r128 = PyNumber_TrueDivide(r124, r127)
    dec_ref r124
    dec_ref r127
    if is_error(r128) goto L85 (error at vector_gauss:28) else goto L63
L63:
    r129 = PyObject_SetItem(b, i, r128)
    dec_ref i
    dec_ref r128
    r130 = r129 >= 0 :: signed
    if not r130 goto L94 (error at vector_gauss:28) else goto L64 :: bool
L64:
    r131 = CPyTagged_Add(r88, -2)
    dec_ref r88 :: int
    inc_ref r131 :: int
    r88 = r131
    r132 = box(int, r131)
    i = r132
    goto L44
L65:
    return b
L66:
    r133 = <error> :: object
    return r133
L67:
    dec_ref a
    goto L66
L68:
    dec_ref a
    dec_ref b
    goto L66
L69:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    goto L66
L70:
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    goto L40
L71:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r18
    goto L66
L72:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    goto L66
L73:
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    goto L39
L74:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    goto L66
L75:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    dec_ref r36
    goto L66
L76:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    dec_ref frac
    goto L66
L77:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    dec_ref frac
    dec_ref r42
    goto L66
L78:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    dec_ref frac
    dec_ref r50
    goto L66
L79:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    dec_ref frac
    dec_ref r50
    dec_ref r52
    goto L66
L80:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    dec_ref frac
    dec_ref r50
    dec_ref r52
    dec_ref r54
    goto L66
L81:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    dec_ref frac
    dec_ref r70
    goto L66
L82:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    dec_ref i
    dec_ref r70
    goto L66
L83:
    dec_ref a
    dec_ref b
    dec_ref r9
    dec_ref r10 :: int
    dec_ref j
    dec_ref r22 :: int
    dec_ref r24 :: int
    goto L66
L84:
    dec_ref a
    dec_ref b
    dec_ref r86
    goto L66
L85:
    dec_ref a
    dec_ref b
    dec_ref i
    dec_ref r86
    dec_ref r88 :: int
    goto L66
L86:
    dec_ref a
    dec_ref i
    dec_ref r86
    dec_ref r88 :: int
    goto L65
L87:
    dec_ref a
    dec_ref b
    dec_ref i
    dec_ref r86
    dec_ref r88 :: int
    dec_ref r95
    goto L66
L88:
    dec_ref a
    dec_ref b
    dec_ref i
    dec_ref r86
    dec_ref r88 :: int
    dec_ref r95
    dec_ref r98
    goto L66
L89:
    dec_ref a
    dec_ref b
    dec_ref i
    dec_ref r86
    dec_ref r88 :: int
    dec_ref r95
    dec_ref r98
    dec_ref r100
    goto L66
L90:
    dec_ref a
    dec_ref b
    dec_ref i
    dec_ref r86
    dec_ref r88 :: int
    dec_ref r95
    dec_ref r98
    dec_ref r110
    goto L66
L91:
    dec_ref a
    dec_ref b
    dec_ref i
    dec_ref r86
    dec_ref r88 :: int
    dec_ref r95
    dec_ref r98
    dec_ref r110
    dec_ref r112
    goto L66
L92:
    dec_ref a
    dec_ref b
    dec_ref i
    dec_ref r86
    dec_ref r88 :: int
    dec_ref r95
    dec_ref r110
    dec_ref r120
    goto L66
L93:
    dec_ref a
    dec_ref b
    dec_ref i
    dec_ref r86
    dec_ref r88 :: int
    dec_ref r124
    goto L66
L94:
    dec_ref a
    dec_ref b
    dec_ref r86
    dec_ref r88 :: int
    goto L66

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: dict
    r6, r7 :: object
    r8 :: bit
    r9 :: str
    r10 :: object
    r11 :: dict
    r12 :: str
    r13 :: object
    r14 :: str
    r15 :: int32
    r16 :: bit
    r17 :: dict
    r18 :: str
    r19 :: list
    r20, r21 :: ptr
    r22 :: str
    r23 :: object
    r24, r25, r26 :: str
    r27 :: object
    r28 :: str
    r29 :: int32
    r30 :: bit
    r31 :: dict
    r32 :: str
    r33 :: list
    r34, r35 :: ptr
    r36 :: str
    r37 :: object
    r38, r39, r40 :: str
    r41 :: object
    r42 :: str
    r43 :: int32
    r44 :: bit
    r45 :: dict
    r46 :: str
    r47 :: list
    r48, r49 :: ptr
    r50 :: str
    r51 :: object
    r52, r53, r54 :: str
    r55 :: object
    r56 :: str
    r57 :: int32
    r58 :: bit
    r59, r60, r61, r62 :: float
    r63 :: list
    r64, r65, r66, r67, r68 :: ptr
    r69, r70, r71, r72 :: float
    r73 :: list
    r74, r75, r76, r77, r78 :: ptr
    r79, r80, r81, r82 :: float
    r83 :: list
    r84, r85, r86, r87, r88 :: ptr
    r89, r90, r91, r92 :: float
    r93 :: list
    r94, r95, r96, r97, r98 :: ptr
    r99 :: list
    r100, r101, r102, r103, r104 :: ptr
    r105 :: object
    r106 :: str
    r107 :: object
    r108 :: dict
    r109 :: str
    r110 :: object
    r111 :: object[2]
    r112 :: object_ptr
    r113, r114 :: object
    r115 :: dict
    r116 :: str
    r117 :: int32
    r118 :: bit
    r119, r120, r121, r122 :: float
    r123 :: list
    r124, r125, r126, r127, r128 :: ptr
    r129 :: object
    r130 :: str
    r131 :: object
    r132 :: dict
    r133 :: str
    r134 :: object
    r135 :: object[2]
    r136 :: object_ptr
    r137, r138 :: object
    r139 :: dict
    r140 :: str
    r141 :: int32
    r142 :: bit
    r143 :: dict
    r144 :: str
    r145 :: object
    r146 :: int
    r147 :: dict
    r148 :: str
    r149 :: object
    r150 :: int32
    r151 :: bit
    r152 :: dict
    r153 :: str
    r154 :: object
    r155 :: dict
    r156 :: str
    r157, r158 :: object
    r159 :: dict
    r160 :: str
    r161 :: int32
    r162 :: bit
    r163 :: dict
    r164 :: str
    r165 :: object
    r166 :: dict
    r167 :: str
    r168 :: object
    r169 :: dict
    r170 :: str
    r171 :: object
    r172 :: object[2]
    r173 :: object_ptr
    r174 :: object
    r175 :: dict
    r176 :: str
    r177 :: int32
    r178 :: bit
    r179 :: dict
    r180 :: str
    r181, r182 :: object
    r183 :: str
    r184 :: object
    r185 :: object[1]
    r186 :: object_ptr
    r187 :: object
    r188 :: str
    r189 :: dict
    r190 :: str
    r191 :: object
    r192 :: dict
    r193 :: str
    r194, r195 :: object
    r196 :: dict
    r197 :: str
    r198, r199 :: object
    r200 :: object[2]
    r201 :: object_ptr
    r202, r203, r204 :: object
    r205 :: str
    r206 :: object
    r207 :: object[2]
    r208 :: object_ptr
    r209 :: object
    r210 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L57 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = gaus.globals :: static
    r6 = numpy :: module
    r7 = load_address _Py_NoneStruct
    r8 = r6 != r7
    if r8 goto L6 else goto L4 :: bool
L4:
    r9 = 'numpy'
    r10 = PyImport_Import(r9)
    if is_error(r10) goto L57 (error at <module>:1) else goto L5
L5:
    numpy = r10 :: module
    dec_ref r10
L6:
    r11 = PyImport_GetModuleDict()
    r12 = 'numpy'
    r13 = CPyDict_GetItem(r11, r12)
    if is_error(r13) goto L57 (error at <module>:1) else goto L7
L7:
    r14 = 'np'
    r15 = CPyDict_SetItem(r5, r14, r13)
    dec_ref r13
    r16 = r15 >= 0 :: signed
    if not r16 goto L57 (error at <module>:1) else goto L8 :: bool
L8:
    r17 = gaus.globals :: static
    r18 = 'array'
    r19 = PyList_New(1)
    if is_error(r19) goto L57 (error at <module>:3) else goto L9
L9:
    r20 = get_element_ptr r19 ob_item :: PyListObject
    r21 = load_mem r20 :: ptr*
    inc_ref r18
    set_mem r21, r18 :: builtins.object*
    r22 = 'numpy'
    r23 = PyImport_ImportModuleLevelObject(r22, r17, 0, r19, 0)
    dec_ref r19
    if is_error(r23) goto L57 (error at <module>:3) else goto L10
L10:
    numpy = r23 :: module
    r24 = 'numpy'
    r25 = 'array'
    r26 = 'array'
    r27 = CPyImport_ImportFrom(r23, r24, r25, r26)
    dec_ref r23
    if is_error(r27) goto L57 (error at <module>:3) else goto L11
L11:
    r28 = 'array'
    r29 = CPyDict_SetItem(r17, r28, r27)
    dec_ref r27
    r30 = r29 >= 0 :: signed
    if not r30 goto L57 (error at <module>:3) else goto L12 :: bool
L12:
    r31 = gaus.globals :: static
    r32 = 'norm'
    r33 = PyList_New(1)
    if is_error(r33) goto L57 (error at <module>:4) else goto L13
L13:
    r34 = get_element_ptr r33 ob_item :: PyListObject
    r35 = load_mem r34 :: ptr*
    inc_ref r32
    set_mem r35, r32 :: builtins.object*
    r36 = 'numpy.linalg'
    r37 = PyImport_ImportModuleLevelObject(r36, r31, 0, r33, 0)
    dec_ref r33
    if is_error(r37) goto L57 (error at <module>:4) else goto L14
L14:
    numpy.linalg = r37 :: module
    r38 = 'numpy.linalg'
    r39 = 'norm'
    r40 = 'norm'
    r41 = CPyImport_ImportFrom(r37, r38, r39, r40)
    dec_ref r37
    if is_error(r41) goto L57 (error at <module>:4) else goto L15
L15:
    r42 = 'norm'
    r43 = CPyDict_SetItem(r31, r42, r41)
    dec_ref r41
    r44 = r43 >= 0 :: signed
    if not r44 goto L57 (error at <module>:4) else goto L16 :: bool
L16:
    r45 = gaus.globals :: static
    r46 = 'solve'
    r47 = PyList_New(1)
    if is_error(r47) goto L57 (error at <module>:5) else goto L17
L17:
    r48 = get_element_ptr r47 ob_item :: PyListObject
    r49 = load_mem r48 :: ptr*
    inc_ref r46
    set_mem r49, r46 :: builtins.object*
    r50 = 'numpy.linalg'
    r51 = PyImport_ImportModuleLevelObject(r50, r45, 0, r47, 0)
    dec_ref r47
    if is_error(r51) goto L57 (error at <module>:5) else goto L18
L18:
    numpy.linalg = r51 :: module
    r52 = 'numpy.linalg'
    r53 = 'solve'
    r54 = 'solve_out_of_the_box'
    r55 = CPyImport_ImportFrom(r51, r52, r53, r54)
    dec_ref r51
    if is_error(r55) goto L57 (error at <module>:5) else goto L19
L19:
    r56 = 'solve_out_of_the_box'
    r57 = CPyDict_SetItem(r45, r56, r55)
    dec_ref r55
    r58 = r57 >= 0 :: signed
    if not r58 goto L57 (error at <module>:5) else goto L20 :: bool
L20:
    r59 = 1.5
    r60 = 2.0
    r61 = 1.5
    r62 = 6.0
    r63 = PyList_New(4)
    if is_error(r63) goto L57 (error at <module>:8) else goto L21
L21:
    r64 = get_element_ptr r63 ob_item :: PyListObject
    r65 = load_mem r64 :: ptr*
    inc_ref r59
    set_mem r65, r59 :: builtins.object*
    r66 = r65 + 8
    inc_ref r60
    set_mem r66, r60 :: builtins.object*
    r67 = r65 + 16
    inc_ref r61
    set_mem r67, r61 :: builtins.object*
    r68 = r65 + 24
    inc_ref r62
    set_mem r68, r62 :: builtins.object*
    r69 = 3.0
    r70 = 2.0
    r71 = 4.8
    r72 = 1.0
    r73 = PyList_New(4)
    if is_error(r73) goto L58 (error at <module>:9) else goto L22
L22:
    r74 = get_element_ptr r73 ob_item :: PyListObject
    r75 = load_mem r74 :: ptr*
    inc_ref r69
    set_mem r75, r69 :: builtins.object*
    r76 = r75 + 8
    inc_ref r70
    set_mem r76, r70 :: builtins.object*
    r77 = r75 + 16
    inc_ref r71
    set_mem r77, r71 :: builtins.object*
    r78 = r75 + 24
    inc_ref r72
    set_mem r78, r72 :: builtins.object*
    r79 = 1.0
    r80 = 6.0
    r81 = 5.8
    r82 = 4.0
    r83 = PyList_New(4)
    if is_error(r83) goto L59 (error at <module>:10) else goto L23
L23:
    r84 = get_element_ptr r83 ob_item :: PyListObject
    r85 = load_mem r84 :: ptr*
    inc_ref r79
    set_mem r85, r79 :: builtins.object*
    r86 = r85 + 8
    inc_ref r80
    set_mem r86, r80 :: builtins.object*
    r87 = r85 + 16
    inc_ref r81
    set_mem r87, r81 :: builtins.object*
    r88 = r85 + 24
    inc_ref r82
    set_mem r88, r82 :: builtins.object*
    r89 = 2.0
    r90 = 1.0
    r91 = 4.0
    r92 = 3.0
    r93 = PyList_New(4)
    if is_error(r93) goto L60 (error at <module>:11) else goto L24
L24:
    r94 = get_element_ptr r93 ob_item :: PyListObject
    r95 = load_mem r94 :: ptr*
    inc_ref r89
    set_mem r95, r89 :: builtins.object*
    r96 = r95 + 8
    inc_ref r90
    set_mem r96, r90 :: builtins.object*
    r97 = r95 + 16
    inc_ref r91
    set_mem r97, r91 :: builtins.object*
    r98 = r95 + 24
    inc_ref r92
    set_mem r98, r92 :: builtins.object*
    r99 = PyList_New(4)
    if is_error(r99) goto L61 (error at <module>:7) else goto L25
L25:
    r100 = get_element_ptr r99 ob_item :: PyListObject
    r101 = load_mem r100 :: ptr*
    set_mem r101, r63 :: builtins.object*
    r102 = r101 + 8
    set_mem r102, r73 :: builtins.object*
    r103 = r101 + 16
    set_mem r103, r83 :: builtins.object*
    r104 = r101 + 24
    set_mem r104, r93 :: builtins.object*
    r105 = builtins :: module
    r106 = 'float'
    r107 = CPyObject_GetAttr(r105, r106)
    if is_error(r107) goto L62 (error at <module>:12) else goto L26
L26:
    r108 = gaus.globals :: static
    r109 = 'array'
    r110 = CPyDict_GetItem(r108, r109)
    if is_error(r110) goto L63 (error at <module>:7) else goto L27
L27:
    r111 = [r99, r107]
    r112 = load_address r111
    r113 = ('dtype',)
    r114 = _PyObject_Vectorcall(r110, r112, 1, r113)
    dec_ref r110
    if is_error(r114) goto L63 (error at <module>:7) else goto L28
L28:
    dec_ref r99
    dec_ref r107
    r115 = gaus.globals :: static
    r116 = 'a'
    r117 = CPyDict_SetItem(r115, r116, r114)
    dec_ref r114
    r118 = r117 >= 0 :: signed
    if not r118 goto L57 (error at <module>:7) else goto L29 :: bool
L29:
    r119 = 5.0
    r120 = 6.0
    r121 = 7.0
    r122 = 8.0
    r123 = PyList_New(4)
    if is_error(r123) goto L57 (error at <module>:14) else goto L30
L30:
    r124 = get_element_ptr r123 ob_item :: PyListObject
    r125 = load_mem r124 :: ptr*
    inc_ref r119
    set_mem r125, r119 :: builtins.object*
    r126 = r125 + 8
    inc_ref r120
    set_mem r126, r120 :: builtins.object*
    r127 = r125 + 16
    inc_ref r121
    set_mem r127, r121 :: builtins.object*
    r128 = r125 + 24
    inc_ref r122
    set_mem r128, r122 :: builtins.object*
    r129 = builtins :: module
    r130 = 'float'
    r131 = CPyObject_GetAttr(r129, r130)
    if is_error(r131) goto L64 (error at <module>:14) else goto L31
L31:
    r132 = gaus.globals :: static
    r133 = 'array'
    r134 = CPyDict_GetItem(r132, r133)
    if is_error(r134) goto L65 (error at <module>:14) else goto L32
L32:
    r135 = [r123, r131]
    r136 = load_address r135
    r137 = ('dtype',)
    r138 = _PyObject_Vectorcall(r134, r136, 1, r137)
    dec_ref r134
    if is_error(r138) goto L65 (error at <module>:14) else goto L33
L33:
    dec_ref r123
    dec_ref r131
    r139 = gaus.globals :: static
    r140 = 'b'
    r141 = CPyDict_SetItem(r139, r140, r138)
    dec_ref r138
    r142 = r141 >= 0 :: signed
    if not r142 goto L57 (error at <module>:14) else goto L34 :: bool
L34:
    r143 = gaus.globals :: static
    r144 = 'a'
    r145 = CPyDict_GetItem(r143, r144)
    if is_error(r145) goto L57 (error at <module>:16) else goto L35
L35:
    r146 = CPyObject_Size(r145)
    dec_ref r145
    if is_error(r146) goto L57 (error at <module>:16) else goto L36
L36:
    r147 = gaus.globals :: static
    r148 = 'n'
    r149 = box(int, r146)
    r150 = CPyDict_SetItem(r147, r148, r149)
    dec_ref r149
    r151 = r150 >= 0 :: signed
    if not r151 goto L57 (error at <module>:16) else goto L37 :: bool
L37:
    r152 = gaus.globals :: static
    r153 = 'a'
    r154 = CPyDict_GetItem(r152, r153)
    if is_error(r154) goto L57 (error at <module>:31) else goto L38
L38:
    r155 = gaus.globals :: static
    r156 = 'b'
    r157 = CPyDict_GetItem(r155, r156)
    if is_error(r157) goto L66 (error at <module>:31) else goto L39
L39:
    r158 = vector_gauss(r154, r157)
    dec_ref r154
    dec_ref r157
    if is_error(r158) goto L57 (error at <module>:31) else goto L40
L40:
    r159 = gaus.globals :: static
    r160 = 'solution'
    r161 = CPyDict_SetItem(r159, r160, r158)
    dec_ref r158
    r162 = r161 >= 0 :: signed
    if not r162 goto L57 (error at <module>:31) else goto L41 :: bool
L41:
    r163 = gaus.globals :: static
    r164 = 'a'
    r165 = CPyDict_GetItem(r163, r164)
    if is_error(r165) goto L57 (error at <module>:32) else goto L42
L42:
    r166 = gaus.globals :: static
    r167 = 'b'
    r168 = CPyDict_GetItem(r166, r167)
    if is_error(r168) goto L67 (error at <module>:32) else goto L43
L43:
    r169 = gaus.globals :: static
    r170 = 'solve_out_of_the_box'
    r171 = CPyDict_GetItem(r169, r170)
    if is_error(r171) goto L68 (error at <module>:32) else goto L44
L44:
    r172 = [r165, r168]
    r173 = load_address r172
    r174 = _PyObject_Vectorcall(r171, r173, 2, 0)
    dec_ref r171
    if is_error(r174) goto L68 (error at <module>:32) else goto L45
L45:
    dec_ref r165
    dec_ref r168
    r175 = gaus.globals :: static
    r176 = 'oob_solution'
    r177 = CPyDict_SetItem(r175, r176, r174)
    dec_ref r174
    r178 = r177 >= 0 :: signed
    if not r178 goto L57 (error at <module>:32) else goto L46 :: bool
L46:
    r179 = gaus.globals :: static
    r180 = 'solution'
    r181 = CPyDict_GetItem(r179, r180)
    if is_error(r181) goto L57 (error at <module>:34) else goto L47
L47:
    r182 = builtins :: module
    r183 = 'print'
    r184 = CPyObject_GetAttr(r182, r183)
    if is_error(r184) goto L69 (error at <module>:34) else goto L48
L48:
    r185 = [r181]
    r186 = load_address r185
    r187 = _PyObject_Vectorcall(r184, r186, 1, 0)
    dec_ref r184
    if is_error(r187) goto L69 (error at <module>:34) else goto L70
L49:
    dec_ref r181
    r188 = 'Максимальное отклонение компоненты решения:'
    r189 = gaus.globals :: static
    r190 = 'solution'
    r191 = CPyDict_GetItem(r189, r190)
    if is_error(r191) goto L57 (error at <module>:35) else goto L50
L50:
    r192 = gaus.globals :: static
    r193 = 'oob_solution'
    r194 = CPyDict_GetItem(r192, r193)
    if is_error(r194) goto L71 (error at <module>:35) else goto L51
L51:
    r195 = PyNumber_Subtract(r191, r194)
    dec_ref r191
    dec_ref r194
    if is_error(r195) goto L57 (error at <module>:35) else goto L52
L52:
    r196 = gaus.globals :: static
    r197 = 'norm'
    r198 = CPyDict_GetItem(r196, r197)
    if is_error(r198) goto L72 (error at <module>:35) else goto L53
L53:
    r199 = box(short_int, 2)
    r200 = [r195, r199]
    r201 = load_address r200
    r202 = ('ord',)
    r203 = _PyObject_Vectorcall(r198, r201, 1, r202)
    dec_ref r198
    if is_error(r203) goto L73 (error at <module>:35) else goto L54
L54:
    dec_ref r195
    dec_ref r199
    r204 = builtins :: module
    r205 = 'print'
    r206 = CPyObject_GetAttr(r204, r205)
    if is_error(r206) goto L74 (error at <module>:35) else goto L55
L55:
    r207 = [r188, r203]
    r208 = load_address r207
    r209 = _PyObject_Vectorcall(r206, r208, 2, 0)
    dec_ref r206
    if is_error(r209) goto L74 (error at <module>:35) else goto L75
L56:
    dec_ref r203
    return 1
L57:
    r210 = <error> :: None
    return r210
L58:
    dec_ref r63
    goto L57
L59:
    dec_ref r63
    dec_ref r73
    goto L57
L60:
    dec_ref r63
    dec_ref r73
    dec_ref r83
    goto L57
L61:
    dec_ref r63
    dec_ref r73
    dec_ref r83
    dec_ref r93
    goto L57
L62:
    dec_ref r99
    goto L57
L63:
    dec_ref r99
    dec_ref r107
    goto L57
L64:
    dec_ref r123
    goto L57
L65:
    dec_ref r123
    dec_ref r131
    goto L57
L66:
    dec_ref r154
    goto L57
L67:
    dec_ref r165
    goto L57
L68:
    dec_ref r165
    dec_ref r168
    goto L57
L69:
    dec_ref r181
    goto L57
L70:
    dec_ref r187
    goto L49
L71:
    dec_ref r191
    goto L57
L72:
    dec_ref r195
    goto L57
L73:
    dec_ref r195
    dec_ref r199
    goto L57
L74:
    dec_ref r203
    goto L57
L75:
    dec_ref r209
    goto L56
